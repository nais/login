name: "NAIS login"
description: "Login to registry used by the NAIS platform"
inputs:
  project_id:
    description: "Google Cloud project ID"
    required: false
  identity_provider:
    description: "Workload Identity Provider"
    required: false
  team:
    description: "Team slug"
    required: true
  prefix:
    description: Prefix for the service account e-mail
    default: "gar"
outputs:
  registry:
    description: "Registry URL"
    value: ${{ steps.setup.outputs.gar_registry_url }}
runs:
  using: "composite"
  steps:
    - name: Setup environment
      shell: bash
      id: "setup"
      run: |
        if [ -n "${{ inputs.project_id}}" ]; then
          echo "::notice ::project_id is deprecated and should not be set, please remove from your workflow. The Github environment variable will be removed from the organization in the future"
        fi

        if [ -n "${{ inputs.identity_provider }}" ]; then
          echo "::notice ::identity_provider is deprecated and should not be set, please remove from your workflow. The Github environment variable will be removed from the organization in the future"
        fi

        wget -q -O deploy.json https://storage.googleapis.com/github-deploy-data/$GITHUB_REPOSITORY_OWNER.json 2>/dev/null
        WGET_EXIT_CODE=$?

        if [ $WGET_EXIT_CODE -ne 0 ]; then
            echo "::warning ::failed getting deploy_data, using fallback"
            project_id="${{ inputs.project_id }}"
            identity_provider="${{ inputs.identity_provider }}"
        else
            project_id=$(jq --raw-output '.NAIS_MANAGEMENT_PROJECT_ID' < deploy.json)
            identity_provider=$(jq --raw-output '.NAIS_WORKLOAD_IDENTITY_PROVIDER' < deploy.json)
        fi

        if [ -z "$project_id" ]; then
          echo "::error ::project_id not set. Please contact the nais team"
          exit 1
        elif [ -z "$identity_provider" ]; then
          echo "::error ::identity_provider not set. Please contact the nais team"
          exit 1
        elif [ -z "${{ inputs.team }}" ]; then
          echo "::error ::team not set. Please provide as input"
          exit 1
        fi

        slug=${{ inputs.team }}
        prefix=${{ inputs.prefix }}
        maxLength=30

        hash=$(echo -n "$slug" | sha256sum | cut -d ' ' -f 1)

        prefixLength=${#prefix}
        hashLength=4
        slugLength=$((maxLength - prefixLength - hashLength - 2))

        truncatedSlug=$(echo -n "${slug:0:$slugLength}" | sed 's/-$//')
        truncatedHash=$(echo -n "$hash" | head -c $hashLength)

        echo "identity_provider=$identity_provider" >> $GITHUB_OUTPUT
        echo "sa_email=$prefix-$truncatedSlug-$truncatedHash@$project_id.iam.gserviceaccount.com" >> $GITHUB_OUTPUT
        echo "gar_registry_url=europe-north1-docker.pkg.dev/$project_id/${{ inputs.team }}" >> $GITHUB_OUTPUT
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v2"
      with:
        workload_identity_provider: ${{ steps.setup.outputs.identity_provider }}
        service_account: ${{ steps.setup.outputs.sa_email }}
        token_format: "access_token"
    - name: "Handle failure"
      if: ${{ failure() && steps.auth.outcome == 'failure' }}
      shell: bash
      run: |
        cat <<EOF
        ::error ::Failed to authenticate to Google Cloud.
        EOF

        echo "Ensure that your team has write access to the Github-repository." >> $GITHUB_STEP_SUMMARY
        echo "And that the repo is authorized through NAIS Console." >> $GITHUB_STEP_SUMMARY
        echo "1. Open NAIS Console in your browser and select your team." >> $GITHUB_STEP_SUMMARY
        echo "2. Select the Repositories tab" >> $GITHUB_STEP_SUMMARY
        echo "3. Find the repository you want to deploy from, and click Authorize" >> $GITHUB_STEP_SUMMARY

        echo "Ensure that you grant the following persmissions in your workflow:" >> $GITHUB_STEP_SUMMARY
        echo '```yaml' >> $GITHUB_STEP_SUMMARY
        echo "permissions:" >> $GITHUB_STEP_SUMMARY
        echo "   contents: read" >> $GITHUB_STEP_SUMMARY
        echo "   id-token: write" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.setup.outputs.gar_registry_url }}
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"
